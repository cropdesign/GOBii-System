<?xml version="1.0" encoding="UTF-8"?>
<bean:beans
        xmlns:bean="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="http://www.springframework.org/schema/security"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!--
    Applies to root appContext beans only, for MVC Controllers is this declaration repeated in MVC config.
    Actually, we currently don't need this as we have on annotation outside of MVC.
    There is more here that can go wrong. If you use interface-based proxy (our demo uses CGLib), you may
    need to add proxy-target-class="true" as well. Book "Spring Security 3.1", Chapter 10, Fine-grained
    Access Control, from header "Method org.gobiiproject.gobidomain.security on Spring MVC controllers" on discusses these topics.
    -->
    <!--<context:component-scan base-package="org.advocacydb.web.sec"/>-->

    <!--  unauthorizedEntryPoint == org.advocacydb.web.sec.UnAuthenticatedEntryPointint -->
    <!--  restAuthenticationManager == userDetailService ==  org.advocacydb.web.controllers.MyUserDetailsService -->
    <http realm="Protected API"
          auto-config="false"
          use-expressions="true"
          create-session="stateless"
          entry-point-ref="unaAuthenticatedEntryPoint"
          authentication-manager-ref="restAuthenticationManager">


        <!--
        This is not easily possible, because it causes:
        DEBUG o.s.s.w.a.ExceptionTranslationFilter - Authentication exception occurred; redirecting to authentication entry point
        org.springframework.org.gobiiproject.gobidomain.security.authentication.AuthenticationCredentialsNotFoundException: An Authentication object was not found in the SecurityContext
        -->
        <!--<anonymous enabled="false"/>-->

        <!-- restAuthenticationFilter == org.advocacydb.web.sec.TokenAuthenticationFilter -->
        <custom-filter ref="restAuthenticationFilter" position="FORM_LOGIN_FILTER"/>
        <intercept-url pattern="/*" access="permitAll"/>
        <intercept-url pattern="/secure/**" access="isFullyAuthenticated()"/>
    </http>


    <bean:bean id="unaAuthenticatedEntryPoint" class="org.gobiiproject.gobiiweb.security.UnAuthenticatedEntryPoint"/>

    <bean:bean id="userDetailService" class="org.gobiiproject.gobidomain.services.impl.UserDetailsServiceImpl"/>

    <authentication-manager id="restAuthenticationManager">
        <authentication-provider user-service-ref="userDetailService">
            <!--
            Default password encoder is PlaintextPasswordEncoder, which fits with our hardcoded users.
            Obviously not a good choice otherwise.
            -->
        </authentication-provider>
    </authentication-manager>


    <bean:bean id="tokenManager" class="org.gobiiproject.gobidomain.security.impl.TokenManagerSingle"/>

    <!--  restAuthenticationManager == userDetailService ==  org.advocacydb.web.controllers.MyUserDetailsService -->
    <bean:bean id="authenticationService" class="org.gobiiproject.gobidomain.services.impl.AuthenticationServiceDefault">
        <bean:constructor-arg ref="restAuthenticationManager"/>
        <bean:constructor-arg ref="tokenManager"/>
    </bean:bean>

    <bean:bean id="restAuthenticationFilter" class="org.gobiiproject.gobiiweb.security.TokenAuthenticationFilter">
        <bean:constructor-arg ref="authenticationService"/>
        <bean:constructor-arg value="/logout"/>
    </bean:bean>

</bean:beans>